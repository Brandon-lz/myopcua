basePath: /
definitions:
  globaldata.Condition:
    properties:
      and:
        description: 规则列表，逻辑与
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      or:
        description: 规则列表，逻辑或
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      rule:
        allOf:
        - $ref: '#/definitions/globaldata.Rule'
        description: 规则
    type: object
  globaldata.Rule:
    properties:
      node_name:
        description: 节点名称
        example: MyVariable
        type: string
      type:
        description: '规则类型 eq, ne, gt, lt, all-time : 相等, 不相等, 大于, 小于, 全时间'
        enum:
        - eq
        - ne
        - gt
        - lt
        - all-time
        example: eq
        type: string
      value:
        description: 规则value
        example: "123"
        type: string
    required:
    - node_name
    - type
    type: object
  noderouters.AddNodeToReadRequest:
    properties:
      data-type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node-id:
        example: ns=2;i=2
        type: string
    required:
    - name
    - node-id
    type: object
  noderouters.AddNodeToReadResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/noderouters.OpcNodeOutput'
      message:
        example: 节点添加成功
        type: string
    type: object
  noderouters.DeleteNodeResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: string
      message:
        example: 节点删除成功
        type: string
    type: object
  noderouters.GetNodeResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/noderouters.OpcNodeWithDataOutput'
      message:
        example: 节点信息
        type: string
    type: object
  noderouters.OpcNodeOutput:
    properties:
      data-type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node-id:
        example: ns=2;s=MyVariable
        type: string
    type: object
  noderouters.OpcNodeWithDataOutput:
    properties:
      data-type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node-id:
        example: ns=2;s=MyVariable
        type: string
      value:
        example: "123"
        type: string
    type: object
  routers.ApiResponse:
    properties:
      message:
        example: 欢迎使用OPC-UA OpenAPI
        type: string
    type: object
  webhookrouters.AddWebhookConfigRequest:
    properties:
      active:
        description: 是否激活，不传的话默认true
        example: true
        type: boolean
      condition_id:
        description: 条件id，不传的话默认新增条件
        example: 1
        type: integer
      name:
        description: webhook名称，可以为空
        example: webhook1
        type: string
      url:
        description: webhook地址
        example: http://192.168.1.1:8800/notify
        type: string
      when:
        allOf:
        - $ref: '#/definitions/globaldata.Condition'
        description: 触发条件，为空时相当于通知所有数据变化
    required:
    - url
    type: object
  webhookrouters.AddWebhookConfigResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: 节点添加成功
        type: string
    type: object
  webhookrouters.CreateConditionRequest:
    properties:
      and:
        description: 规则列表，逻辑与
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      or:
        description: 规则列表，逻辑或
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      rule:
        allOf:
        - $ref: '#/definitions/globaldata.Rule'
        description: 规则
    type: object
  webhookrouters.CreateConditionResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConditionRead'
      message:
        example: Condition created successfully
        type: string
    type: object
  webhookrouters.GetWebhookConfigByIdResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: Webhook configuration get successfully
        type: string
    type: object
  webhookrouters.GetWebhookConfigByNameResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: Webhook configuration get successfully
        type: string
    type: object
  webhookrouters.WebHookConditionRead:
    properties:
      condition:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    required:
    - condition
    - created_at
    - id
    - updated_at
    type: object
  webhookrouters.WebHookConfigRead:
    properties:
      active:
        type: boolean
      condition_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      url:
        type: string
      when:
        type: string
    required:
    - active
    - created_at
    - id
    - name
    - updated_at
    - url
    type: object
  webhookrouters.WebHookExampleRequest:
    properties:
      node_id:
        description: 节点id
        example: ns=1;s=MyVariable
        type: string
      node_name:
        description: 节点名称
        example: MyVariable
        type: string
      value:
        description: 入参示例
        example: "123"
        type: string
    type: object
  webhookrouters.WebHookExampleResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        example: webhook example
        type: string
      message:
        example: webhook example success
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: advanced_to@163.com
  description: OPC-UA转http协议
  title: OPC-UA Open API
  version: "1.0"
paths:
  /api/v1/:
    get:
      consumes:
      - application/json
      description: 根路由
      produces:
      - application/json
      responses:
        "200":
          description: 欢迎使用OPC-UA OpenAPI
          schema:
            $ref: '#/definitions/routers.ApiResponse'
      summary: 根路由
      tags:
      - default
  /api/v1/opc-node/add-node-to-read:
    post:
      consumes:
      - application/json
      description: AddNodeToRead 路由
      parameters:
      - description: 见下方JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/noderouters.AddNodeToReadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 节点添加成功
          schema:
            $ref: '#/definitions/noderouters.AddNodeToReadResponse'
      security:
      - BearerAuth: []
      summary: AddNodeToRead 路由
      tags:
      - nodes
  /api/v1/opc-node/delete-node/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteNode 路由
      parameters:
      - description: 节点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 节点删除成功
          schema:
            $ref: '#/definitions/noderouters.DeleteNodeResponse'
      security:
      - BearerAuth: []
      summary: DeleteNode 路由
      tags:
      - nodes
  /api/v1/opc-node/get-node/{id}:
    get:
      consumes:
      - application/json
      description: GetNode 路由
      parameters:
      - description: 节点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 节点信息
          schema:
            $ref: '#/definitions/noderouters.GetNodeResponse'
      security:
      - BearerAuth: []
      summary: GetNode 路由
      tags:
      - nodes
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: ping 路由
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: ping 路由
      tags:
      - default
  /api/v1/webhook/condition:
    post:
      consumes:
      - application/json
      description: |-
        # 创建触发条件
        ## 请求参数
        | 参数名称 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | and | []Condition | 否 | 规则列表，逻辑与 |
        | or | []Condition | 否 | 规则列表，逻辑或 |
        | rule | Rule | 否 | 规则 |
        *注意：Condition是嵌套类型，Condition包含and，or，rule，所以and里面可以嵌套and。。。无限嵌套*
      parameters:
      - description: 创建条件
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.CreateConditionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.CreateConditionResponse'
      summary: 创建触发条件
      tags:
      - Webhook
  /api/v1/webhook/config:
    post:
      consumes:
      - application/json
      description: |-
        # 配置一条新的webhook

        ## 例1：当节点node1值等于123时，发送通知到http://localhost:8080/api/v1/webhook/example
        ```json
        {
        "active": true,
        "name":"webhook1",
        "url": "http://localhost:8080/api/v1/webhook/example",
        "when": {
        "rule": {
        "node_name": "node1",
        "type": "eq",
        "value": "123"
        }
        }
        }
        ```
        使用when字段会创建新的条件condition，并将其配置在这个webhook上
        ## 例2：使用已经配置好的条件condition
        ```json
        {
        "active": true,
        "url": "http://localhost:8080/api/v1/webhook/example",
        "condition_id": 10
        }
        ```
        ## 常见异常
        - "code": 2007 代表数据重复，不能创建重复的webhook，具体重复了哪个字段，请看ConstraintName最后一个下划线后面的字段名
        - "code": 400 "json: cannot unmarshal string into Go struct field AddWebhookConfigRequest.condition_id of type int64"  ： 看下body参数，数字类型传成了字符串
      parameters:
      - description: Webhook configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.AddWebhookConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.AddWebhookConfigResponse'
      summary: 配置一条新的webhook
      tags:
      - Webhook
  /api/v1/webhook/config-by-name/{name}:
    get:
      consumes:
      - application/json
      description: 根据名称获取webhook配置
      parameters:
      - description: webhook名称
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.GetWebhookConfigByNameResponse'
      summary: 根据名称获取webhook配置
      tags:
      - Webhook
  /api/v1/webhook/config/{id}:
    get:
      consumes:
      - application/json
      description: 根据id获取webhook配置
      parameters:
      - description: webhook id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.GetWebhookConfigByIdResponse'
      summary: 根据id获取webhook配置
      tags:
      - Webhook
  /api/v1/webhook/example:
    post:
      consumes:
      - application/json
      description: webhook示例
      parameters:
      - description: Webhook example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.WebHookExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.WebHookExampleResponse'
      summary: webhook示例
      tags:
      - Webhook
  /health:
    get:
      consumes:
      - application/json
      description: healthCheck 路由
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: healthCheck 路由
      tags:
      - default
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
