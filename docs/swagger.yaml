basePath: /
definitions:
  globaldata.Condition:
    properties:
      and:
        description: 规则列表，逻辑与
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      or:
        description: 规则列表，逻辑或
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      rule:
        allOf:
        - $ref: '#/definitions/globaldata.Rule'
        description: 规则
    type: object
  globaldata.NodeIdWithValueInput:
    properties:
      node_name:
        description: 节点名称
        example: MyVariable
        type: string
      value:
        description: 要写入的值
    required:
    - node_name
    - value
    type: object
  globaldata.Rule:
    properties:
      node_name:
        description: 节点名称
        example: MyVariable
        type: string
      type:
        description: '规则类型 eq, ne, gt, lt, all-time, in, not-in: 相等, 不相等, 大于, 小于,
          全时间, 包含, 不包含'
        enum:
        - eq
        - ne
        - gt
        - lt
        - all-time
        - in
        - not-in
        example: eq
        type: string
      value:
        description: 规则value
    required:
    - type
    type: object
  noderouters.AddNodeToReadRequest:
    properties:
      data_type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node_id:
        example: ns=2;i=2
        type: string
    required:
    - name
    - node_id
    type: object
  noderouters.AddNodeToReadResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/noderouters.OpcNodeOutput'
      message:
        example: 节点添加成功
        type: string
    type: object
  noderouters.DeleteNodeResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: string
      message:
        example: 节点删除成功
        type: string
    type: object
  noderouters.GetNodeResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/noderouters.OpcNodeWithDataOutput'
      message:
        example: 节点信息
        type: string
    type: object
  noderouters.OpcNodeOutput:
    properties:
      data_type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node_id:
        example: ns=2;s=MyVariable
        type: string
    type: object
  noderouters.OpcNodeWithDataOutput:
    properties:
      data_type:
        example: Int32
        type: string
      name:
        example: MyVariable
        type: string
      node_id:
        example: ns=2;s=MyVariable
        type: string
      value:
        example: "123"
        type: string
    type: object
  noderouters.WriteNodeValueRequest:
    properties:
      data:
        items:
          $ref: '#/definitions/globaldata.NodeIdWithValueInput'
        type: array
    required:
    - data
    type: object
  noderouters.WriteNodeValueResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        description: Data    []globaldata.NodeWriteResultOutput `json:"data"`
        example: 节点值写入完成
        type: string
    type: object
  routers.ApiResponse:
    properties:
      message:
        example: 欢迎使用OPC-UA OpenAPI
        type: string
    type: object
  webhookrouters.AddWebhookConfigRequest:
    properties:
      active:
        description: 是否激活，不传的话默认true
        example: true
        type: boolean
      condition_id:
        description: 条件id，不传的话默认新增条件
        example: 1
        type: integer
      name:
        description: webhook名称，可以为空
        example: webhook1
        type: string
      need_node_list:
        description: 需要的节点值列表，到时候会传参给webhook
        items:
          type: string
        type: array
      url:
        description: webhook地址
        example: http://192.168.1.1:8800/notify
        type: string
      when:
        allOf:
        - $ref: '#/definitions/globaldata.Condition'
        description: 触发条件，为空时相当于通知所有数据变化
    required:
    - need_node_list
    - url
    type: object
  webhookrouters.AddWebhookConfigResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: 节点添加成功
        type: string
    type: object
  webhookrouters.CreateConditionRequest:
    properties:
      and:
        description: 规则列表，逻辑与
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      or:
        description: 规则列表，逻辑或
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      rule:
        allOf:
        - $ref: '#/definitions/globaldata.Rule'
        description: 规则
    type: object
  webhookrouters.CreateConditionResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConditionRead'
      message:
        example: Condition created successfully
        type: string
    type: object
  webhookrouters.DeleteConditionResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Condition deleted successfully
        type: string
    type: object
  webhookrouters.GetAllConditionsByPageData:
    properties:
      conditions:
        items:
          $ref: '#/definitions/webhookrouters.WebHookConditionRead'
        type: array
      total:
        type: integer
    required:
    - conditions
    - total
    type: object
  webhookrouters.GetAllConditionsByPageResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.GetAllConditionsByPageData'
      message:
        example: Condition get successfully
        type: string
    type: object
  webhookrouters.GetWebhookConfigByIdResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: Webhook configuration get successfully
        type: string
    type: object
  webhookrouters.GetWebhookConfigByNameResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConfigRead'
      message:
        example: Webhook configuration get successfully
        type: string
    type: object
  webhookrouters.UpdateConditionRequest:
    properties:
      and:
        description: 规则列表，逻辑与
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      or:
        description: 规则列表，逻辑或
        items:
          $ref: '#/definitions/globaldata.Condition'
        type: array
      rule:
        allOf:
        - $ref: '#/definitions/globaldata.Rule'
        description: 规则
    type: object
  webhookrouters.UpdateConditionResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/webhookrouters.WebHookConditionRead'
      message:
        example: Condition updated successfully
        type: string
    type: object
  webhookrouters.WebHookConditionRead:
    properties:
      condition:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    required:
    - condition
    - created_at
    - id
    - updated_at
    type: object
  webhookrouters.WebHookConfigRead:
    properties:
      active:
        type: boolean
      condition_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      needNodeList:
        items:
          type: string
        type: array
      updated_at:
        type: string
      url:
        type: string
      when:
        type: string
    required:
    - active
    - created_at
    - id
    - name
    - needNodeList
    - updated_at
    - url
    type: object
  webhookrouters.WebHookExampleRequest:
    properties:
      timestamp:
        description: 时间戳 int64类型
        type: integer
      values:
        additionalProperties: true
        description: 节点值 any类型
        type: object
    required:
    - timestamp
    - values
    type: object
  webhookrouters.WebHookExampleResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        example: webhook example
        type: string
      message:
        example: webhook example success
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: advanced_to@163.com
  description: |-
    OPC-UA转http协议
    两步完成opcua到http协议的转换(查看下面接口中带**步骤号**字样的接口)
  title: OPC-UA Open API
  version: "1.0"
paths:
  /api/v1/:
    get:
      consumes:
      - application/json
      description: 根路由
      produces:
      - application/json
      responses:
        "200":
          description: 欢迎使用OPC-UA OpenAPI
          schema:
            $ref: '#/definitions/routers.ApiResponse'
      summary: 根路由
      tags:
      - default
  /api/v1/opc-node/add-node-to-read:
    post:
      consumes:
      - application/json
      description: AddNodeToRead 路由
      parameters:
      - description: 见下方JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/noderouters.AddNodeToReadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 节点添加成功
          schema:
            $ref: '#/definitions/noderouters.AddNodeToReadResponse'
      security:
      - BearerAuth: []
      summary: AddNodeToRead 路由 步骤**1**
      tags:
      - opc-nodes
  /api/v1/opc-node/delete-node/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteNode 路由
      parameters:
      - description: 节点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 节点删除成功
          schema:
            $ref: '#/definitions/noderouters.DeleteNodeResponse'
      security:
      - BearerAuth: []
      summary: DeleteNode 路由
      tags:
      - opc-nodes
  /api/v1/opc-node/get-node/{id}:
    get:
      consumes:
      - application/json
      description: GetNode 路由
      parameters:
      - description: 节点ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 节点信息
          schema:
            $ref: '#/definitions/noderouters.GetNodeResponse'
      security:
      - BearerAuth: []
      summary: GetNode 路由
      tags:
      - opc-nodes
  /api/v1/opc-node/write-node-value:
    put:
      consumes:
      - application/json
      description: |-
        WriteNodeValue 路由
        参数定义
        ## 请求参数
        | 参数名称 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | data | list | 是 | 见下方JSON |
        ## data类型 定义
        | 字段 | 类型 | 是否必填 | 描述 |
        | --- | --- | --- | --- |
        | NodeName | string | 是 | 节点名称 |
        | Value | any | 是 | 写入值 |
        ## 参数示例
        ```json
        {
        "data": [
        {
        "NodeName": "MyVariable",
        "Value": 123
        },
        {
        "NodeName": "MyVariable2",
        "Value": "abc"
        }
        ]
        }
        ```
        ## 返回值定义
        | 字段 | 类型 | 描述 |
        | --- | --- | --- |
        | Code | int | 状态码 |
        | Message | string | 状态信息 |
        ## 返回值示例
        ```json
        {
        "Code": 200,
        "Message": "节点值写入完成"
        }
        ```
      parameters:
      - description: 见下方JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/noderouters.WriteNodeValueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 节点值写入成功
          schema:
            $ref: '#/definitions/noderouters.WriteNodeValueResponse'
      security:
      - BearerAuth: []
      summary: WriteNodeValue 路由
      tags:
      - opc-nodes
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: ping 路由
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: ping 路由
      tags:
      - default
  /api/v1/webhook:
    get:
      consumes:
      - application/json
      description: 根据名称获取webhook配置
      parameters:
      - description: webhook名称
        example: webhook1
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.GetWebhookConfigByNameResponse'
      summary: 根据名称获取webhook配置
      tags:
      - Webhook
    post:
      consumes:
      - application/json
      description: |-
        # 配置一条新的webhook
        ## 说明
        该接口用于配置一条新的webhook，并通过when字段或condition_id字段配置触发条件，当条件满足时会触发webhook，并将所需要的数据传给webhook url接口。
        ## 请求参数

        - name：webhook名称，为空时系统会自动生成一个uuid
        - url：webhook地址（POST请求），必填，当条件满足时会调用该url，并挂载数据到body中
        - active：是否激活，不传的话默认true
        - when：条件，里面是一个json，具体的格式看/api/v1/webhook/condition接口说明，when其实就是一个condition条件。该字段和condition_id字段必须传一个。
        - condition_id：条件id，将条件condition配置到webhook上，该字段和when字段必须传一个。
        - need_node_list：需要的节点值列表，条件触发时会传参给webhook
        ## 例1：当节点node1值等于123时，发送通知到http://localhost:8080/api/v1/webhook/example
        ```json
        {
        "active": true,
        "name":"webhook1",
        "url": "http://localhost:8080/api/v1/webhook/example",
        "when": {
        "rule": {
        "node_name": "node1",
        "type": "eq",
        "value": 123
        }
        }
        }
        ```
        使用when字段会创建新的条件condition，并将其配置在这个webhook上
        ## 例2：使用已经配置好的条件condition
        ```json
        {
        "active": true,
        "url": "http://localhost:8080/api/v1/webhook/example",
        "condition_id": 10
        }
        ```
        ## 常见异常
        - "code": 2007 代表数据重复，不能创建重复的webhook，具体重复了哪个字段，请看ConstraintName最后一个下划线后面的字段名
        - "code": 400 "json: cannot unmarshal string into Go struct field AddWebhookConfigRequest.condition_id of type int64"  ： 看下body参数，数字类型传成了字符串
      parameters:
      - description: Webhook configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.AddWebhookConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.AddWebhookConfigResponse'
      summary: 配置一条新的webhook  步骤**2**
      tags:
      - Webhook
  /api/v1/webhook/{id}:
    get:
      consumes:
      - application/json
      description: 根据id获取webhook配置
      parameters:
      - description: webhook id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.GetWebhookConfigByIdResponse'
      summary: 根据id获取webhook配置
      tags:
      - Webhook
  /api/v1/webhook/condition:
    post:
      consumes:
      - application/json
      description: |-
        # 参数说明
        ## 请求参数
        | 参数名称 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | and | list中嵌套本参数 | 否 | 规则列表，逻辑与 |
        | or | list中嵌套本参数 | 否 | 规则列表，逻辑或 |
        | rule | Rule | 否 | 规则 |
        ## Rule类型 定义
        | 字段 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | node_name | string | 是 | 节点名称 |
        | type | string | 是 | 规则类型，支持eq ne gt lt all-time in not-in |
        | value | any | 是 | 比对值 |
        ## 参数示例1 : 当节点MyVariable大于123时触发
        ```json
        {
        "rule": {
        "node_name": "MyVariable",
        "type": "gt",
        "value": 123
        }
        }
        ```
        ## 参数示例2 : 当节点node1等于在["abc","def"]，并且节点node2等于123时触发
        ```json
        {
        "and": [
        {
        "rule": {
        "node_name": "node1",
        "type": "in",
        "value": [
        "abc",
        "def"
        ]
        }
        },
        {
        "rule": {
        "node_name": "node2",
        "type": "eq",
        "value": 123
        }
        }
        ]
        }
        ```
        ## 参数示例3 : 一直触发
        ```json
        {
        "rule": {
        "type": "all-time"
        }
        }
        ```
        *注意：Condition是嵌套类型，Condition包含and，or，rule，所以and里面可以嵌套and。。。无限嵌套*
      parameters:
      - description: 创建条件
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.CreateConditionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.CreateConditionResponse'
      summary: 创建触发条件
      tags:
      - Webhook
  /api/v1/webhook/condition/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 条件ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.DeleteConditionResponse'
      summary: 删除触发条件
      tags:
      - Webhook
    put:
      consumes:
      - application/json
      description: |-
        # 参数说明
        ## 请求参数
        | 参数名称 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | id | int | 是 | 条件ID |
        | and | list中嵌套本参数 | 否 | 规则列表，逻辑与 |
        | or | list中嵌套本参数 | 否 | 规则列表，逻辑或 |
        | rule | Rule | 否 | 规则 |
        ## Rule类型 定义
        | 字段 | 类型 | 是否必填 | 描述 |
        | --- | --- | --- | --- |
        | node_name | string | 是 | 节点名称 |
        | type | string | 是 | 规则类型，支持eq ne gt lt all-time in not-in |
        | value | any | 是 | 比对值 |
        ## 参数示例1 : 更新条件ID为1的条件，将节点MyVariable大于123改为小于123
        ```json
        {
        "id": 1,
        "rule": {
        "node_name": "MyVariable",
        "type": "lt",
        "value": 123
        }
        }
        ```
        ## 参数示例2 : 更新条件ID为2的条件，将节点node1等于在["abc","def"]，并且节点node2等于123改为节点node1等于在["abc","def"]，并且节点node2等于123
        ```json
        {
        "id": 2,
        "and": [
        {
        "rule": {
        "node_name": "node1",
        "type": "in",
        "value": [
        "abc",
        "def"
        ]
        }
        },
        {
        "rule": {
        "node_name": "node2",
        "type": "eq",
        "value": 123
        }
        }
        ]
        }
        ```
        ## 参数示例3 : 更新条件ID为3的条件，将一直触发改为节点node1等于123
        ```json
        {
        "id": 3,
        "rule": {
        "node_name": "node1",
        "type": "eq",
        "value": 123
        }
        }
        ```
        *注意：Condition是嵌套类型，Condition包含and，or，rule，所以and里面可以嵌套and。。。无限嵌套*
      parameters:
      - description: 条件ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新条件
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.UpdateConditionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.UpdateConditionResponse'
      summary: 更新触发条件
      tags:
      - Webhook
  /api/v1/webhook/conditions:
    get:
      consumes:
      - application/json
      description: |-
        # 参数说明
        ## 请求参数
        | 参数名称 | 类型 | 必填 | 描述 |
        | --- | --- | --- | --- |
        | page | int | 是 | 页码 |
        | page_size | int | 是 | 每页数量 |
        ## 返回参数
        | 参数名称 | 类型 | 描述 |
        | --- | --- | --- |
        | id | int | 条件ID |
        | condition | string | 条件表达式 |
        | created_at | time.Time | 创建时间 |
        | updated_at | time.Time | 更新时间 |
      parameters:
      - in: query
        minimum: 0
        name: page
        required: true
        type: integer
      - in: query
        minimum: 0
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.GetAllConditionsByPageResponse'
      summary: 获取触发条件列表
      tags:
      - Webhook
  /api/v1/webhook/example:
    post:
      consumes:
      - application/json
      description: webhook示例
      parameters:
      - description: Webhook example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookrouters.WebHookExampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/webhookrouters.WebHookExampleResponse'
      summary: webhook示例  要像这个接口一样去定义参数，带两个字段，一个是values，一个是timestamp。注意，必须是post请求。
      tags:
      - Webhook Example
  /health:
    get:
      consumes:
      - application/json
      description: healthCheck 路由
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: healthCheck 路由
      tags:
      - default
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
