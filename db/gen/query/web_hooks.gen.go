// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Brandon-lz/myopcua/db/gen/model"
)

func newWebHook(db *gorm.DB, opts ...gen.DOOption) webHook {
	_webHook := webHook{}

	_webHook.webHookDo.UseDB(db, opts...)
	_webHook.webHookDo.UseModel(&model.WebHook{})

	tableName := _webHook.webHookDo.TableName()
	_webHook.ALL = field.NewAsterisk(tableName)
	_webHook.ID = field.NewInt64(tableName, "id")
	_webHook.CreatedAt = field.NewTime(tableName, "created_at")
	_webHook.UpdatedAt = field.NewTime(tableName, "updated_at")
	_webHook.DeletedAt = field.NewField(tableName, "deleted_at")
	_webHook.Name = field.NewString(tableName, "name")
	_webHook.URL = field.NewString(tableName, "url")
	_webHook.Active = field.NewBool(tableName, "active")
	_webHook.WebHookConditionRefer = field.NewInt64(tableName, "web_hook_condition_refer")

	_webHook.fillFieldMap()

	return _webHook
}

type webHook struct {
	webHookDo

	ALL                   field.Asterisk
	ID                    field.Int64
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Name                  field.String // webhook名称
	URL                   field.String // url地址
	Active                field.Bool   // 是否激活
	WebHookConditionRefer field.Int64  // WebHookCondition foreign key

	fieldMap map[string]field.Expr
}

func (w webHook) Table(newTableName string) *webHook {
	w.webHookDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webHook) As(alias string) *webHook {
	w.webHookDo.DO = *(w.webHookDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webHook) updateTableName(table string) *webHook {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.Name = field.NewString(table, "name")
	w.URL = field.NewString(table, "url")
	w.Active = field.NewBool(table, "active")
	w.WebHookConditionRefer = field.NewInt64(table, "web_hook_condition_refer")

	w.fillFieldMap()

	return w
}

func (w *webHook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webHook) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["name"] = w.Name
	w.fieldMap["url"] = w.URL
	w.fieldMap["active"] = w.Active
	w.fieldMap["web_hook_condition_refer"] = w.WebHookConditionRefer
}

func (w webHook) clone(db *gorm.DB) webHook {
	w.webHookDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webHook) replaceDB(db *gorm.DB) webHook {
	w.webHookDo.ReplaceDB(db)
	return w
}

type webHookDo struct{ gen.DO }

type IWebHookDo interface {
	gen.SubQuery
	Debug() IWebHookDo
	WithContext(ctx context.Context) IWebHookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebHookDo
	WriteDB() IWebHookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebHookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebHookDo
	Not(conds ...gen.Condition) IWebHookDo
	Or(conds ...gen.Condition) IWebHookDo
	Select(conds ...field.Expr) IWebHookDo
	Where(conds ...gen.Condition) IWebHookDo
	Order(conds ...field.Expr) IWebHookDo
	Distinct(cols ...field.Expr) IWebHookDo
	Omit(cols ...field.Expr) IWebHookDo
	Join(table schema.Tabler, on ...field.Expr) IWebHookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebHookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebHookDo
	Group(cols ...field.Expr) IWebHookDo
	Having(conds ...gen.Condition) IWebHookDo
	Limit(limit int) IWebHookDo
	Offset(offset int) IWebHookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebHookDo
	Unscoped() IWebHookDo
	Create(values ...*model.WebHook) error
	CreateInBatches(values []*model.WebHook, batchSize int) error
	Save(values ...*model.WebHook) error
	First() (*model.WebHook, error)
	Take() (*model.WebHook, error)
	Last() (*model.WebHook, error)
	Find() ([]*model.WebHook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebHook, err error)
	FindInBatches(result *[]*model.WebHook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebHook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebHookDo
	Assign(attrs ...field.AssignExpr) IWebHookDo
	Joins(fields ...field.RelationField) IWebHookDo
	Preload(fields ...field.RelationField) IWebHookDo
	FirstOrInit() (*model.WebHook, error)
	FirstOrCreate() (*model.WebHook, error)
	FindByPage(offset int, limit int) (result []*model.WebHook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebHookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webHookDo) Debug() IWebHookDo {
	return w.withDO(w.DO.Debug())
}

func (w webHookDo) WithContext(ctx context.Context) IWebHookDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webHookDo) ReadDB() IWebHookDo {
	return w.Clauses(dbresolver.Read)
}

func (w webHookDo) WriteDB() IWebHookDo {
	return w.Clauses(dbresolver.Write)
}

func (w webHookDo) Session(config *gorm.Session) IWebHookDo {
	return w.withDO(w.DO.Session(config))
}

func (w webHookDo) Clauses(conds ...clause.Expression) IWebHookDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webHookDo) Returning(value interface{}, columns ...string) IWebHookDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webHookDo) Not(conds ...gen.Condition) IWebHookDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webHookDo) Or(conds ...gen.Condition) IWebHookDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webHookDo) Select(conds ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webHookDo) Where(conds ...gen.Condition) IWebHookDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webHookDo) Order(conds ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webHookDo) Distinct(cols ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webHookDo) Omit(cols ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webHookDo) Join(table schema.Tabler, on ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webHookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webHookDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webHookDo) Group(cols ...field.Expr) IWebHookDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webHookDo) Having(conds ...gen.Condition) IWebHookDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webHookDo) Limit(limit int) IWebHookDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webHookDo) Offset(offset int) IWebHookDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webHookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebHookDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webHookDo) Unscoped() IWebHookDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webHookDo) Create(values ...*model.WebHook) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webHookDo) CreateInBatches(values []*model.WebHook, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webHookDo) Save(values ...*model.WebHook) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webHookDo) First() (*model.WebHook, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHook), nil
	}
}

func (w webHookDo) Take() (*model.WebHook, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHook), nil
	}
}

func (w webHookDo) Last() (*model.WebHook, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHook), nil
	}
}

func (w webHookDo) Find() ([]*model.WebHook, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebHook), err
}

func (w webHookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebHook, err error) {
	buf := make([]*model.WebHook, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webHookDo) FindInBatches(result *[]*model.WebHook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webHookDo) Attrs(attrs ...field.AssignExpr) IWebHookDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webHookDo) Assign(attrs ...field.AssignExpr) IWebHookDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webHookDo) Joins(fields ...field.RelationField) IWebHookDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webHookDo) Preload(fields ...field.RelationField) IWebHookDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webHookDo) FirstOrInit() (*model.WebHook, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHook), nil
	}
}

func (w webHookDo) FirstOrCreate() (*model.WebHook, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHook), nil
	}
}

func (w webHookDo) FindByPage(offset int, limit int) (result []*model.WebHook, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webHookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webHookDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webHookDo) Delete(models ...*model.WebHook) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webHookDo) withDO(do gen.Dao) *webHookDo {
	w.DO = *do.(*gen.DO)
	return w
}
