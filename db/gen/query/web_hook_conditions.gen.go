// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Brandon-lz/myopcua/db/gen/model"
)

func newWebHookCondition(db *gorm.DB, opts ...gen.DOOption) webHookCondition {
	_webHookCondition := webHookCondition{}

	_webHookCondition.webHookConditionDo.UseDB(db, opts...)
	_webHookCondition.webHookConditionDo.UseModel(&model.WebHookCondition{})

	tableName := _webHookCondition.webHookConditionDo.TableName()
	_webHookCondition.ALL = field.NewAsterisk(tableName)
	_webHookCondition.ID = field.NewInt64(tableName, "id")
	_webHookCondition.CreatedAt = field.NewTime(tableName, "created_at")
	_webHookCondition.UpdatedAt = field.NewTime(tableName, "updated_at")
	_webHookCondition.DeletedAt = field.NewField(tableName, "deleted_at")
	_webHookCondition.Condition = field.NewString(tableName, "condition")

	_webHookCondition.fillFieldMap()

	return _webHookCondition
}

type webHookCondition struct {
	webHookConditionDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Condition field.String // 条件表达式

	fieldMap map[string]field.Expr
}

func (w webHookCondition) Table(newTableName string) *webHookCondition {
	w.webHookConditionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webHookCondition) As(alias string) *webHookCondition {
	w.webHookConditionDo.DO = *(w.webHookConditionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webHookCondition) updateTableName(table string) *webHookCondition {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.Condition = field.NewString(table, "condition")

	w.fillFieldMap()

	return w
}

func (w *webHookCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webHookCondition) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["condition"] = w.Condition
}

func (w webHookCondition) clone(db *gorm.DB) webHookCondition {
	w.webHookConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webHookCondition) replaceDB(db *gorm.DB) webHookCondition {
	w.webHookConditionDo.ReplaceDB(db)
	return w
}

type webHookConditionDo struct{ gen.DO }

type IWebHookConditionDo interface {
	gen.SubQuery
	Debug() IWebHookConditionDo
	WithContext(ctx context.Context) IWebHookConditionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebHookConditionDo
	WriteDB() IWebHookConditionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebHookConditionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebHookConditionDo
	Not(conds ...gen.Condition) IWebHookConditionDo
	Or(conds ...gen.Condition) IWebHookConditionDo
	Select(conds ...field.Expr) IWebHookConditionDo
	Where(conds ...gen.Condition) IWebHookConditionDo
	Order(conds ...field.Expr) IWebHookConditionDo
	Distinct(cols ...field.Expr) IWebHookConditionDo
	Omit(cols ...field.Expr) IWebHookConditionDo
	Join(table schema.Tabler, on ...field.Expr) IWebHookConditionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebHookConditionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebHookConditionDo
	Group(cols ...field.Expr) IWebHookConditionDo
	Having(conds ...gen.Condition) IWebHookConditionDo
	Limit(limit int) IWebHookConditionDo
	Offset(offset int) IWebHookConditionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebHookConditionDo
	Unscoped() IWebHookConditionDo
	Create(values ...*model.WebHookCondition) error
	CreateInBatches(values []*model.WebHookCondition, batchSize int) error
	Save(values ...*model.WebHookCondition) error
	First() (*model.WebHookCondition, error)
	Take() (*model.WebHookCondition, error)
	Last() (*model.WebHookCondition, error)
	Find() ([]*model.WebHookCondition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebHookCondition, err error)
	FindInBatches(result *[]*model.WebHookCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebHookCondition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebHookConditionDo
	Assign(attrs ...field.AssignExpr) IWebHookConditionDo
	Joins(fields ...field.RelationField) IWebHookConditionDo
	Preload(fields ...field.RelationField) IWebHookConditionDo
	FirstOrInit() (*model.WebHookCondition, error)
	FirstOrCreate() (*model.WebHookCondition, error)
	FindByPage(offset int, limit int) (result []*model.WebHookCondition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebHookConditionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webHookConditionDo) Debug() IWebHookConditionDo {
	return w.withDO(w.DO.Debug())
}

func (w webHookConditionDo) WithContext(ctx context.Context) IWebHookConditionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webHookConditionDo) ReadDB() IWebHookConditionDo {
	return w.Clauses(dbresolver.Read)
}

func (w webHookConditionDo) WriteDB() IWebHookConditionDo {
	return w.Clauses(dbresolver.Write)
}

func (w webHookConditionDo) Session(config *gorm.Session) IWebHookConditionDo {
	return w.withDO(w.DO.Session(config))
}

func (w webHookConditionDo) Clauses(conds ...clause.Expression) IWebHookConditionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webHookConditionDo) Returning(value interface{}, columns ...string) IWebHookConditionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webHookConditionDo) Not(conds ...gen.Condition) IWebHookConditionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webHookConditionDo) Or(conds ...gen.Condition) IWebHookConditionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webHookConditionDo) Select(conds ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webHookConditionDo) Where(conds ...gen.Condition) IWebHookConditionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webHookConditionDo) Order(conds ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webHookConditionDo) Distinct(cols ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webHookConditionDo) Omit(cols ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webHookConditionDo) Join(table schema.Tabler, on ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webHookConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webHookConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webHookConditionDo) Group(cols ...field.Expr) IWebHookConditionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webHookConditionDo) Having(conds ...gen.Condition) IWebHookConditionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webHookConditionDo) Limit(limit int) IWebHookConditionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webHookConditionDo) Offset(offset int) IWebHookConditionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webHookConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebHookConditionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webHookConditionDo) Unscoped() IWebHookConditionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webHookConditionDo) Create(values ...*model.WebHookCondition) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webHookConditionDo) CreateInBatches(values []*model.WebHookCondition, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webHookConditionDo) Save(values ...*model.WebHookCondition) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webHookConditionDo) First() (*model.WebHookCondition, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHookCondition), nil
	}
}

func (w webHookConditionDo) Take() (*model.WebHookCondition, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHookCondition), nil
	}
}

func (w webHookConditionDo) Last() (*model.WebHookCondition, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHookCondition), nil
	}
}

func (w webHookConditionDo) Find() ([]*model.WebHookCondition, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebHookCondition), err
}

func (w webHookConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebHookCondition, err error) {
	buf := make([]*model.WebHookCondition, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webHookConditionDo) FindInBatches(result *[]*model.WebHookCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webHookConditionDo) Attrs(attrs ...field.AssignExpr) IWebHookConditionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webHookConditionDo) Assign(attrs ...field.AssignExpr) IWebHookConditionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webHookConditionDo) Joins(fields ...field.RelationField) IWebHookConditionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webHookConditionDo) Preload(fields ...field.RelationField) IWebHookConditionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webHookConditionDo) FirstOrInit() (*model.WebHookCondition, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHookCondition), nil
	}
}

func (w webHookConditionDo) FirstOrCreate() (*model.WebHookCondition, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebHookCondition), nil
	}
}

func (w webHookConditionDo) FindByPage(offset int, limit int) (result []*model.WebHookCondition, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webHookConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webHookConditionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webHookConditionDo) Delete(models ...*model.WebHookCondition) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webHookConditionDo) withDO(do gen.Dao) *webHookConditionDo {
	w.DO = *do.(*gen.DO)
	return w
}
