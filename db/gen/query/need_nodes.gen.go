// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Brandon-lz/myopcua/db/gen/model"
)

func newNeedNode(db *gorm.DB, opts ...gen.DOOption) needNode {
	_needNode := needNode{}

	_needNode.needNodeDo.UseDB(db, opts...)
	_needNode.needNodeDo.UseModel(&model.NeedNode{})

	tableName := _needNode.needNodeDo.TableName()
	_needNode.ALL = field.NewAsterisk(tableName)
	_needNode.ID = field.NewInt64(tableName, "id")
	_needNode.CreatedAt = field.NewTime(tableName, "created_at")
	_needNode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_needNode.DeletedAt = field.NewField(tableName, "deleted_at")
	_needNode.NodeName = field.NewString(tableName, "node_name")
	_needNode.WebHookRefer = field.NewInt64(tableName, "web_hook_refer")

	_needNode.fillFieldMap()

	return _needNode
}

type needNode struct {
	needNodeDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	NodeName     field.String // 需要订阅的节点名称
	WebHookRefer field.Int64  // WebHook foreign key

	fieldMap map[string]field.Expr
}

func (n needNode) Table(newTableName string) *needNode {
	n.needNodeDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n needNode) As(alias string) *needNode {
	n.needNodeDo.DO = *(n.needNodeDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *needNode) updateTableName(table string) *needNode {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.DeletedAt = field.NewField(table, "deleted_at")
	n.NodeName = field.NewString(table, "node_name")
	n.WebHookRefer = field.NewInt64(table, "web_hook_refer")

	n.fillFieldMap()

	return n
}

func (n *needNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *needNode) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 6)
	n.fieldMap["id"] = n.ID
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["deleted_at"] = n.DeletedAt
	n.fieldMap["node_name"] = n.NodeName
	n.fieldMap["web_hook_refer"] = n.WebHookRefer
}

func (n needNode) clone(db *gorm.DB) needNode {
	n.needNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n needNode) replaceDB(db *gorm.DB) needNode {
	n.needNodeDo.ReplaceDB(db)
	return n
}

type needNodeDo struct{ gen.DO }

type INeedNodeDo interface {
	gen.SubQuery
	Debug() INeedNodeDo
	WithContext(ctx context.Context) INeedNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INeedNodeDo
	WriteDB() INeedNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INeedNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INeedNodeDo
	Not(conds ...gen.Condition) INeedNodeDo
	Or(conds ...gen.Condition) INeedNodeDo
	Select(conds ...field.Expr) INeedNodeDo
	Where(conds ...gen.Condition) INeedNodeDo
	Order(conds ...field.Expr) INeedNodeDo
	Distinct(cols ...field.Expr) INeedNodeDo
	Omit(cols ...field.Expr) INeedNodeDo
	Join(table schema.Tabler, on ...field.Expr) INeedNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INeedNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) INeedNodeDo
	Group(cols ...field.Expr) INeedNodeDo
	Having(conds ...gen.Condition) INeedNodeDo
	Limit(limit int) INeedNodeDo
	Offset(offset int) INeedNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INeedNodeDo
	Unscoped() INeedNodeDo
	Create(values ...*model.NeedNode) error
	CreateInBatches(values []*model.NeedNode, batchSize int) error
	Save(values ...*model.NeedNode) error
	First() (*model.NeedNode, error)
	Take() (*model.NeedNode, error)
	Last() (*model.NeedNode, error)
	Find() ([]*model.NeedNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NeedNode, err error)
	FindInBatches(result *[]*model.NeedNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NeedNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INeedNodeDo
	Assign(attrs ...field.AssignExpr) INeedNodeDo
	Joins(fields ...field.RelationField) INeedNodeDo
	Preload(fields ...field.RelationField) INeedNodeDo
	FirstOrInit() (*model.NeedNode, error)
	FirstOrCreate() (*model.NeedNode, error)
	FindByPage(offset int, limit int) (result []*model.NeedNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INeedNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n needNodeDo) Debug() INeedNodeDo {
	return n.withDO(n.DO.Debug())
}

func (n needNodeDo) WithContext(ctx context.Context) INeedNodeDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n needNodeDo) ReadDB() INeedNodeDo {
	return n.Clauses(dbresolver.Read)
}

func (n needNodeDo) WriteDB() INeedNodeDo {
	return n.Clauses(dbresolver.Write)
}

func (n needNodeDo) Session(config *gorm.Session) INeedNodeDo {
	return n.withDO(n.DO.Session(config))
}

func (n needNodeDo) Clauses(conds ...clause.Expression) INeedNodeDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n needNodeDo) Returning(value interface{}, columns ...string) INeedNodeDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n needNodeDo) Not(conds ...gen.Condition) INeedNodeDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n needNodeDo) Or(conds ...gen.Condition) INeedNodeDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n needNodeDo) Select(conds ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n needNodeDo) Where(conds ...gen.Condition) INeedNodeDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n needNodeDo) Order(conds ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n needNodeDo) Distinct(cols ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n needNodeDo) Omit(cols ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n needNodeDo) Join(table schema.Tabler, on ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n needNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n needNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n needNodeDo) Group(cols ...field.Expr) INeedNodeDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n needNodeDo) Having(conds ...gen.Condition) INeedNodeDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n needNodeDo) Limit(limit int) INeedNodeDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n needNodeDo) Offset(offset int) INeedNodeDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n needNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INeedNodeDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n needNodeDo) Unscoped() INeedNodeDo {
	return n.withDO(n.DO.Unscoped())
}

func (n needNodeDo) Create(values ...*model.NeedNode) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n needNodeDo) CreateInBatches(values []*model.NeedNode, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n needNodeDo) Save(values ...*model.NeedNode) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n needNodeDo) First() (*model.NeedNode, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NeedNode), nil
	}
}

func (n needNodeDo) Take() (*model.NeedNode, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NeedNode), nil
	}
}

func (n needNodeDo) Last() (*model.NeedNode, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NeedNode), nil
	}
}

func (n needNodeDo) Find() ([]*model.NeedNode, error) {
	result, err := n.DO.Find()
	return result.([]*model.NeedNode), err
}

func (n needNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NeedNode, err error) {
	buf := make([]*model.NeedNode, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n needNodeDo) FindInBatches(result *[]*model.NeedNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n needNodeDo) Attrs(attrs ...field.AssignExpr) INeedNodeDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n needNodeDo) Assign(attrs ...field.AssignExpr) INeedNodeDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n needNodeDo) Joins(fields ...field.RelationField) INeedNodeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n needNodeDo) Preload(fields ...field.RelationField) INeedNodeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n needNodeDo) FirstOrInit() (*model.NeedNode, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NeedNode), nil
	}
}

func (n needNodeDo) FirstOrCreate() (*model.NeedNode, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NeedNode), nil
	}
}

func (n needNodeDo) FindByPage(offset int, limit int) (result []*model.NeedNode, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n needNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n needNodeDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n needNodeDo) Delete(models ...*model.NeedNode) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *needNodeDo) withDO(do gen.Dao) *needNodeDo {
	n.DO = *do.(*gen.DO)
	return n
}
